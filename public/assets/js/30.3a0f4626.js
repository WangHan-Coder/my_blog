(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{534:function(e,t,s){"use strict";s.r(t);var n=s(5),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"acorn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#acorn"}},[e._v("#")]),e._v(" Acorn")]),e._v(" "),s("p",[e._v("A tiny, fast JavaScript parser written in JavaScript.")]),e._v(" "),s("h2",{attrs:{id:"community"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#community"}},[e._v("#")]),e._v(" Community")]),e._v(" "),s("p",[e._v("Acorn is open source software released under an\n"),s("a",{attrs:{href:"https://github.com/acornjs/acorn/blob/master/acorn/LICENSE",target:"_blank",rel:"noopener noreferrer"}},[e._v("MIT license"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("p",[e._v("You are welcome to\n"),s("a",{attrs:{href:"https://github.com/acornjs/acorn/issues",target:"_blank",rel:"noopener noreferrer"}},[e._v("report bugs"),s("OutboundLink")],1),e._v(" or create pull\nrequests on "),s("a",{attrs:{href:"https://github.com/acornjs/acorn",target:"_blank",rel:"noopener noreferrer"}},[e._v("github"),s("OutboundLink")],1),e._v(". For questions\nand discussion, please use the\n"),s("a",{attrs:{href:"https://discuss.ternjs.net",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tern discussion forum"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("h2",{attrs:{id:"installation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),s("p",[e._v("The easiest way to install acorn is from "),s("a",{attrs:{href:"https://www.npmjs.com/",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("npm")]),s("OutboundLink")],1),e._v(":")]),e._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" acorn\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Alternately, you can download the source and build acorn yourself:")]),e._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/acornjs/acorn.git\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" acorn\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h2",{attrs:{id:"interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface"}},[e._v("#")]),e._v(" Interface")]),e._v(" "),s("p",[s("strong",[e._v("parse")]),s("code",[e._v("(input, options)")]),e._v(" is the main interface to the library. The\n"),s("code",[e._v("input")]),e._v(" parameter is a string, "),s("code",[e._v("options")]),e._v(" must be an object setting\nsome of the options listed below. The return value will be an abstract\nsyntax tree object as specified by the "),s("a",{attrs:{href:"https://github.com/estree/estree",target:"_blank",rel:"noopener noreferrer"}},[e._v("ESTree\nspec"),s("OutboundLink")],1),e._v(".")]),e._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" acorn "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"acorn"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("acorn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1 + 1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("ecmaVersion"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("When encountering a syntax error, the parser will raise a\n"),s("code",[e._v("SyntaxError")]),e._v(" object with a meaningful message. The error object will\nhave a "),s("code",[e._v("pos")]),e._v(" property that indicates the string offset at which the\nerror occurred, and a "),s("code",[e._v("loc")]),e._v(" object that contains a "),s("code",[e._v("{line, column}")]),e._v("\nobject referring to that same position.")]),e._v(" "),s("p",[e._v("Options are provided by in a second argument, which should be an\nobject containing any of these fields (only "),s("code",[e._v("ecmaVersion")]),e._v(" is\nrequired):")]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("ecmaVersion")]),e._v(": Indicates the ECMAScript version to parse. Must be\neither 3, 5, 6 (or 2015), 7 (2016), 8 (2017), 9 (2018), 10 (2019),\n11 (2020), 12 (2021), 13 (2022, partial support)\nor "),s("code",[e._v('"latest"')]),e._v(" (the latest the library supports). This influences\nsupport for strict mode, the set of reserved words, and support\nfor new syntax features.")]),e._v(" "),s("p",[s("strong",[e._v("NOTE")]),e._v(": Only 'stage 4' (finalized) ECMAScript features are being\nimplemented by Acorn. Other proposed new features must be\nimplemented through plugins.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("sourceType")]),e._v(": Indicate the mode the code should be parsed in. Can be\neither "),s("code",[e._v('"script"')]),e._v(" or "),s("code",[e._v('"module"')]),e._v(". This influences global strict mode\nand parsing of "),s("code",[e._v("import")]),e._v(" and "),s("code",[e._v("export")]),e._v(" declarations.")]),e._v(" "),s("p",[s("strong",[e._v("NOTE")]),e._v(": If set to "),s("code",[e._v('"module"')]),e._v(", then static "),s("code",[e._v("import")]),e._v(" / "),s("code",[e._v("export")]),e._v(" syntax\nwill be valid, even if "),s("code",[e._v("ecmaVersion")]),e._v(" is less than 6.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("onInsertedSemicolon")]),e._v(": If given a callback, that callback will be\ncalled whenever a missing semicolon is inserted by the parser. The\ncallback will be given the character offset of the point where the\nsemicolon is inserted as argument, and if "),s("code",[e._v("locations")]),e._v(" is on, also a\n"),s("code",[e._v("{line, column}")]),e._v(" object representing this position.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("onTrailingComma")]),e._v(": Like "),s("code",[e._v("onInsertedSemicolon")]),e._v(", but for trailing\ncommas.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("allowReserved")]),e._v(": If "),s("code",[e._v("false")]),e._v(", using a reserved word will generate\nan error. Defaults to "),s("code",[e._v("true")]),e._v(" for "),s("code",[e._v("ecmaVersion")]),e._v(" 3, "),s("code",[e._v("false")]),e._v(" for higher\nversions. When given the value "),s("code",[e._v('"never"')]),e._v(", reserved words and\nkeywords can also not be used as property names (as in Internet\nExplorer's old parser).")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("allowReturnOutsideFunction")]),e._v(": By default, a return statement at\nthe top level raises an error. Set this to "),s("code",[e._v("true")]),e._v(" to accept such\ncode.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("allowImportExportEverywhere")]),e._v(": By default, "),s("code",[e._v("import")]),e._v(" and "),s("code",[e._v("export")]),e._v("\ndeclarations can only appear at a program's top level. Setting this\noption to "),s("code",[e._v("true")]),e._v(" allows them anywhere where a statement is allowed,\nand also allows "),s("code",[e._v("import.meta")]),e._v(" expressions to appear in scripts\n(when "),s("code",[e._v("sourceType")]),e._v(" is not "),s("code",[e._v('"module"')]),e._v(").")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("allowAwaitOutsideFunction")]),e._v(": If "),s("code",[e._v("false")]),e._v(", "),s("code",[e._v("await")]),e._v(" expressions can\nonly appear inside "),s("code",[e._v("async")]),e._v(" functions. Defaults to "),s("code",[e._v("true")]),e._v(" for\n"),s("code",[e._v("ecmaVersion")]),e._v(" 2022 and later, "),s("code",[e._v("false")]),e._v(" for lower versions. Setting this option to\n"),s("code",[e._v("true")]),e._v(" allows to have top-level "),s("code",[e._v("await")]),e._v(" expressions. They are\nstill not allowed in non-"),s("code",[e._v("async")]),e._v(" functions, though.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("allowSuperOutsideMethod")]),e._v(": By default, "),s("code",[e._v("super")]),e._v(" outside a method\nraises an error. Set this to "),s("code",[e._v("true")]),e._v(" to accept such code.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("allowHashBang")]),e._v(": When this is enabled (off by default), if the\ncode starts with the characters "),s("code",[e._v("#!")]),e._v(" (as in a shellscript), the\nfirst line will be treated as a comment.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("locations")]),e._v(": When "),s("code",[e._v("true")]),e._v(", each node has a "),s("code",[e._v("loc")]),e._v(" object attached\nwith "),s("code",[e._v("start")]),e._v(" and "),s("code",[e._v("end")]),e._v(" subobjects, each of which contains the\none-based line and zero-based column numbers in "),s("code",[e._v("{line, column}")]),e._v("\nform. Default is "),s("code",[e._v("false")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("onToken")]),e._v(": If a function is passed for this option, each found\ntoken will be passed in same format as tokens returned from\n"),s("code",[e._v("tokenizer().getToken()")]),e._v(".")]),e._v(" "),s("p",[e._v("If array is passed, each found token is pushed to it.")]),e._v(" "),s("p",[e._v("Note that you are not allowed to call the parser from the\ncallback—that will corrupt its internal state.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("onComment")]),e._v(": If a function is passed for this option, whenever a\ncomment is encountered the function will be called with the\nfollowing parameters:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("block")]),e._v(": "),s("code",[e._v("true")]),e._v(" if the comment is a block comment, false if it\nis a line comment.")]),e._v(" "),s("li",[s("code",[e._v("text")]),e._v(": The content of the comment.")]),e._v(" "),s("li",[s("code",[e._v("start")]),e._v(": Character offset of the start of the comment.")]),e._v(" "),s("li",[s("code",[e._v("end")]),e._v(": Character offset of the end of the comment.")])]),e._v(" "),s("p",[e._v("When the "),s("code",[e._v("locations")]),e._v(" options is on, the "),s("code",[e._v("{line, column}")]),e._v(" locations\nof the comment’s start and end are passed as two additional\nparameters.")]),e._v(" "),s("p",[e._v("If array is passed for this option, each found comment is pushed\nto it as object in Esprima format:")]),e._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"type"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Line"')]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Block"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"comment text"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"start"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"end"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// If `locations` option is on:")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"loc"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"start"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("line"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" column"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"end"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("line"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" column"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// If `ranges` option is on:")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"range"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" Number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("p",[e._v("Note that you are not allowed to call the parser from the\ncallback—that will corrupt its internal state.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("ranges")]),e._v(": Nodes have their start and end characters offsets\nrecorded in "),s("code",[e._v("start")]),e._v(" and "),s("code",[e._v("end")]),e._v(" properties (directly on the node,\nrather than the "),s("code",[e._v("loc")]),e._v(" object, which holds line/column data. To also\nadd a\n"),s("a",{attrs:{href:"https://bugzilla.mozilla.org/show_bug.cgi?id=745678",target:"_blank",rel:"noopener noreferrer"}},[e._v("semi-standardized"),s("OutboundLink")],1),e._v(" "),s("code",[e._v("range")]),e._v(" property holding a "),s("code",[e._v("[start, end]")]),e._v(" array with the same\nnumbers, set the "),s("code",[e._v("ranges")]),e._v(" option to "),s("code",[e._v("true")]),e._v(".")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("program")]),e._v(": It is possible to parse multiple files into a single\nAST by passing the tree produced by parsing the first file as the\n"),s("code",[e._v("program")]),e._v(' option in subsequent parses. This will add the toplevel\nforms of the parsed file to the "Program" (top) node of an existing\nparse tree.')])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("sourceFile")]),e._v(": When the "),s("code",[e._v("locations")]),e._v(" option is "),s("code",[e._v("true")]),e._v(", you can pass\nthis option to add a "),s("code",[e._v("source")]),e._v(" attribute in every node’s "),s("code",[e._v("loc")]),e._v("\nobject. Note that the contents of this option are not examined or\nprocessed in any way; you are free to use whatever format you\nchoose.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("directSourceFile")]),e._v(": Like "),s("code",[e._v("sourceFile")]),e._v(", but a "),s("code",[e._v("sourceFile")]),e._v(" property\nwill be added (regardless of the "),s("code",[e._v("location")]),e._v(" option) directly to the\nnodes, rather than the "),s("code",[e._v("loc")]),e._v(" object.")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("preserveParens")]),e._v(": If this option is "),s("code",[e._v("true")]),e._v(", parenthesized expressions\nare represented by (non-standard) "),s("code",[e._v("ParenthesizedExpression")]),e._v(" nodes\nthat have a single "),s("code",[e._v("expression")]),e._v(" property containing the expression\ninside parentheses.")])])]),e._v(" "),s("p",[s("strong",[e._v("parseExpressionAt")]),s("code",[e._v("(input, offset, options)")]),e._v(" will parse a single\nexpression in a string, and return its AST. It will not complain if\nthere is more of the string left after the expression.")]),e._v(" "),s("p",[s("strong",[e._v("tokenizer")]),s("code",[e._v("(input, options)")]),e._v(" returns an object with a "),s("code",[e._v("getToken")]),e._v("\nmethod that can be called repeatedly to get the next token, a "),s("code",[e._v("{start, end, type, value}")]),e._v(" object (with added "),s("code",[e._v("loc")]),e._v(" property when the\n"),s("code",[e._v("locations")]),e._v(" option is enabled and "),s("code",[e._v("range")]),e._v(" property when the "),s("code",[e._v("ranges")]),e._v("\noption is enabled). When the token's type is "),s("code",[e._v("tokTypes.eof")]),e._v(", you\nshould stop calling the method, since it will keep returning that same\ntoken forever.")]),e._v(" "),s("p",[e._v("In ES6 environment, returned result can be used as any other\nprotocol-compliant iterable:")]),e._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" token "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("of")]),e._v(" acorn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tokenizer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// iterate over the tokens")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// transform code to array of tokens:")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" tokens "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("acorn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("tokenizer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("str"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br")])]),s("p",[s("strong",[e._v("tokTypes")]),e._v(" holds an object mapping names to the token type objects\nthat end up in the "),s("code",[e._v("type")]),e._v(" properties of tokens.")]),e._v(" "),s("p",[s("strong",[e._v("getLineInfo")]),s("code",[e._v("(input, offset)")]),e._v(" can be used to get a "),s("code",[e._v("{line, column}")]),e._v(" object for a given program string and offset.")]),e._v(" "),s("h3",{attrs:{id:"the-parser-class"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-parser-class"}},[e._v("#")]),e._v(" The "),s("code",[e._v("Parser")]),e._v(" class")]),e._v(" "),s("p",[e._v("Instances of the "),s("strong",[s("code",[e._v("Parser")])]),e._v(" class contain all the state and logic\nthat drives a parse. It has static methods "),s("code",[e._v("parse")]),e._v(",\n"),s("code",[e._v("parseExpressionAt")]),e._v(", and "),s("code",[e._v("tokenizer")]),e._v(" that match the top-level\nfunctions by the same name.")]),e._v(" "),s("p",[e._v("When extending the parser with plugins, you need to call these methods\non the extended version of the class. To extend a parser with plugins,\nyou can use its static "),s("code",[e._v("extend")]),e._v(" method.")]),e._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" acorn "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"acorn"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" jsx "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"acorn-jsx"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" JSXParser "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" acorn"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Parser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("extend")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("jsx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nJSXParser"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("parse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"foo(<bar/>)"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("ecmaVersion"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2020")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("p",[e._v("The "),s("code",[e._v("extend")]),e._v(" method takes any number of plugin values, and returns a\nnew "),s("code",[e._v("Parser")]),e._v(" class that includes the extra parser logic provided by\nthe plugins.")]),e._v(" "),s("h2",{attrs:{id:"command-line-interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#command-line-interface"}},[e._v("#")]),e._v(" Command line interface")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("bin/acorn")]),e._v(" utility can be used to parse a file from the command\nline. It accepts as arguments its input file and the following\noptions:")]),e._v(" "),s("ul",[s("li",[s("p",[s("code",[e._v("--ecma3|--ecma5|--ecma6|--ecma7|--ecma8|--ecma9|--ecma10")]),e._v(": Sets the ECMAScript version\nto parse. Default is version 9.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("--module")]),e._v(": Sets the parsing mode to "),s("code",[e._v('"module"')]),e._v(". Is set to "),s("code",[e._v('"script"')]),e._v(" otherwise.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("--locations")]),e._v(': Attaches a "loc" object to each node with "start" and\n"end" subobjects, each of which contains the one-based line and\nzero-based column numbers in '),s("code",[e._v("{line, column}")]),e._v(" form.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("--allow-hash-bang")]),e._v(": If the code starts with the characters #! (as\nin a shellscript), the first line will be treated as a comment.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("--allow-await-outside-function")]),e._v(": Allows top-level "),s("code",[e._v("await")]),e._v(" expressions.\nSee the "),s("code",[e._v("allowAwaitOutsideFunction")]),e._v(" option for more information.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("--compact")]),e._v(": No whitespace is used in the AST output.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("--silent")]),e._v(": Do not output the AST, just return the exit status.")])]),e._v(" "),s("li",[s("p",[s("code",[e._v("--help")]),e._v(": Print the usage information and quit.")])])]),e._v(" "),s("p",[e._v("The utility spits out the syntax tree as JSON data.")]),e._v(" "),s("h2",{attrs:{id:"existing-plugins"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#existing-plugins"}},[e._v("#")]),e._v(" Existing plugins")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/RReverser/acorn-jsx",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("acorn-jsx")]),s("OutboundLink")],1),e._v(": Parse "),s("a",{attrs:{href:"https://github.com/facebook/jsx",target:"_blank",rel:"noopener noreferrer"}},[e._v("Facebook JSX syntax extensions"),s("OutboundLink")],1)])]),e._v(" "),s("p",[e._v("Plugins for ECMAScript proposals:")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/acornjs/acorn-stage3",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("acorn-stage3")]),s("OutboundLink")],1),e._v(": Parse most stage 3 proposals, bundling:\n"),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/acornjs/acorn-class-fields",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("acorn-class-fields")]),s("OutboundLink")],1),e._v(": Parse "),s("a",{attrs:{href:"https://github.com/tc39/proposal-class-fields",target:"_blank",rel:"noopener noreferrer"}},[e._v("class fields proposal"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/acornjs/acorn-import-meta",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("acorn-import-meta")]),s("OutboundLink")],1),e._v(": Parse "),s("a",{attrs:{href:"https://github.com/tc39/proposal-import-meta",target:"_blank",rel:"noopener noreferrer"}},[e._v("import.meta proposal"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/acornjs/acorn-private-methods",target:"_blank",rel:"noopener noreferrer"}},[s("code",[e._v("acorn-private-methods")]),s("OutboundLink")],1),e._v(": parse "),s("a",{attrs:{href:"https://github.com/tc39/proposal-private-methods",target:"_blank",rel:"noopener noreferrer"}},[e._v("private methods, getters and setters proposal"),s("OutboundLink")],1),e._v("n")])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);