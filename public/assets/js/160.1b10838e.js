(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{659:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"为什么要学习函数式编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要学习函数式编程"}},[t._v("#")]),t._v(" 为什么要学习函数式编程？")]),t._v(" "),a("ul",[a("li",[t._v("首先，开发社区和各大软件公司都渐渐认识到函数式编程给其业务应用带来的好处。如今，大多数主流编程语言（如Scala、Java 8、 F#、Python和JavaScript等）等提供了原生的或基于API的函数式支持。")]),t._v(" "),a("li",[t._v("其次，在JavaScript的上下文中，函数式思想可以塑造非常优秀的语言特性，写出干净的、模块化的、可测试性、简洁的代码，提高开发效率。对于JavaScript为什么用函数式写法更加高效，一方面是由于对JavaScript语言的整体理解偏差，另一方面是JavaScript缺乏一些能够妥当地管理状态的原生结构，所以把管理状态的职责交给了开发人员（这也是程序中产生bug的原因之一）。在脚本代码规模较小时，这个问题还不明显，但随着代码量的不断增长，就会变得难以控制，而函数式编程，会在某种程度上，让你不受此问题的影响。")]),t._v(" "),a("li",[t._v("最后，通过使用一整套基于纯函数式的已被科学证明的技术与实践，即使复杂性日益提高，你也可以编写出易于推理和理解的代码。编写函数式的JavaScript，不仅能够提高整个应用程序的质量，也能够更好地了解并精通JavaScript语言本身。")])]),t._v(" "),a("h2",{attrs:{id:"函数式编程是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程是什么"}},[t._v("#")]),t._v(" 函数式编程是什么？")]),t._v(" "),a("ul",[a("li",[t._v("简单来说，函数式编程（FP）是一种强调以函数使用为主的软件开发风格。")]),t._v(" "),a("li",[t._v("函数式编程的目标是使用函数来"),a("strong",[t._v("抽象作用在数据之上的控制流与操作")]),t._v("，从而在系统中"),a("strong",[t._v("消除副作用")]),t._v("并"),a("strong",[t._v("减少对状态的改变")]),t._v("。")])]),t._v(" "),a("blockquote",[a("p",[t._v("函数式编程不是一种具体的工具，而是一种编写代码的方式。因此，你既可以用它来编写客户端（基于浏览器的）程序，也可以用它来编写服务器端的应用程序（如Node.js）。")])]),t._v(" "),a("p",[t._v("来看一个简单的例子，我们需要在页面上显示“Hello World”：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<h1>Hello World</h1>'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这行代码非常简单，所有的代码都是写死的，如果我们需要修改DOM元素、属性、或内容，就需要重写整个表达式，但是如果使用一个函数来封装这行代码，用参数代替可变的部分，就有了一定的可复用性。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleDOM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" content")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" content\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handleDOM")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'innerHTML'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<h1>Hello World</h1>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("这样虽然稍有改进，但仍然不是一段可重用的代码。我们可以有更加函数式的写法：")])])}),[],!1,null,null,null);s.default=e.exports}}]);