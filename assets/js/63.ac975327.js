(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{479:function(e,t,v){"use strict";v.r(t);var _=v(1),o=Object(_.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"遇到的问题和如何解决的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#遇到的问题和如何解决的"}},[e._v("#")]),e._v(" 遇到的问题和如何解决的")]),e._v(" "),t("p",[e._v("问题一：如何检测未使用的exports（即在本文件和其它文件都未使用的exports变量）？")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/typescript-eslint/typescript-eslint",target:"_blank",rel:"noopener noreferrer"}},[e._v("typescript-eslint"),t("OutboundLink")],1),e._v("的"),t("code",[e._v("no-unused-vars")]),e._v("规则可以检测出在当前文件未使用的变量，但默认会排除exports出去的变量")]),e._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/pzavolinsky/ts-unused-exports",target:"_blank",rel:"noopener noreferrer"}},[e._v("ts-unused-exports"),t("OutboundLink")],1),e._v("可以静态分析出未使用的exports")]),e._v(" "),t("li",[e._v("先用"),t("code",[e._v("ts-unused-exports")]),e._v("分析出哪些文件中哪些变量未使用，将这些信息以参数方式传入"),t("code",[e._v("eslint")]),e._v("的"),t("code",[e._v("rules")]),e._v("中。传入时将未使用的变量做成一个正则，比如1.js文件的a、b两个变量未使用，传入的参数为{ filename: 'c:\\1.js', varsIgnorePattern: '^a$|^b$' }")]),e._v(" "),t("li",[e._v("不过不能在直接修改"),t("code",[e._v("typescript-eslint")]),e._v("中"),t("code",[e._v("no-unused-vars")]),e._v("规则的源码，需要自己写一个eslint插件，将原来"),t("code",[e._v("no-unused-vars")]),e._v("的代码fork一份，再其基础上写一个新"),t("code",[e._v("rules")]),e._v("。开发"),t("code",[e._v("eslint plugin")]),e._v("可以参考"),t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/372181145",target:"_blank",rel:"noopener noreferrer"}},[e._v("文档"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("问题二：如何修复未使用的变量、函数等？")]),e._v(" "),t("ul",[t("li",[e._v("采用"),t("code",[e._v("eslint")]),e._v("的"),t("code",[e._v("fixer")]),e._v("，"),t("code",[e._v("fixer")]),e._v("的编写参考了"),t("a",{attrs:{href:"https://github.com/aladdin-add/eslint-plugin/blob/master/packages/autofix/lib/rules/no-unused-vars.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("文件"),t("OutboundLink")],1)])]),e._v(" "),t("p",[e._v("问题三：如何调试eslint的检测和修复？")]),e._v(" "),t("ul",[t("li",[e._v("我在"),t("code",[e._v("eslint")]),e._v("的官网中找到了一些"),t("a",{attrs:{href:"http://eslint.cn/docs/developer-guide/nodejs-api#cliengine",target:"_blank",rel:"noopener noreferrer"}},[e._v("api"),t("OutboundLink")],1),e._v("，可以断点调试")])]),e._v(" "),t("h2",{attrs:{id:"觉得那些地方做的不好"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#觉得那些地方做的不好"}},[e._v("#")]),e._v(" 觉得那些地方做的不好？")]),e._v(" "),t("ol",[t("li",[e._v("修改"),t("code",[e._v("typescript-eslint")]),e._v("中"),t("code",[e._v("no-unused-vars")]),e._v("规则的源码时，由于其"),t("code",[e._v("packages")]),e._v("引入关系复杂，所以直接修改了其打包后的源码，这样的话以后如果这块源码改了的话，不太好升级。")])]),e._v(" "),t("h2",{attrs:{id:"不能删除的内容及原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#不能删除的内容及原因"}},[e._v("#")]),e._v(" 不能删除的内容及原因")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("const {a} = b;")]),e._v("和"),t("code",[e._v("function foo({a = {}}) {}")]),e._v("\n第一个修复结果为"),t("code",[e._v("const {} = b;")]),e._v("。这里即使a没用到，也不能把整行全部删除，因为可能这一行会有"),t("strong",[e._v("副作用")]),e._v("，比如"),t("code",[e._v("const {a} = b();")]),e._v("，如果是"),t("code",[e._v("const {a = f()} = b;")]),e._v("这种情况，a也不能够删除，也就不能进行任何修复了。")])]),e._v(" "),t("p",[e._v("第二个无法修复，原因是这种形参的默认值也可能产生副作用，比如"),t("code",[e._v("function foo({a = b()}) {}")]),e._v("或"),t("code",[e._v("function foo({a = {b:b()}}) {}")])]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[t("code",[e._v("function foo(a, {b}, {c}) {};")]),e._v("\n修复结果为"),t("code",[e._v("function foo(a, {}) {};")]),e._v("。这里我是判断如果是函数的最后一个参数、解构的也只有一个属性，并且这个属性没用到，就会把属性和"),t("code",[e._v("{}")]),e._v("整体删除掉，但"),t("code",[e._v("eslint")]),e._v("的修复顺序是从左到右的，所以先检测b后检测c，所以b修复后会留下一个"),t("code",[e._v("{}")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("class")]),e._v("语法没做修复处理，因为项目用的比较少。")])])]),e._v(" "),t("h2",{attrs:{id:"完成后觉得有哪些收获"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#完成后觉得有哪些收获"}},[e._v("#")]),e._v(" 完成后觉得有哪些收获")]),e._v(" "),t("ul",[t("li",[e._v("由于解析ts和js文件用的是"),t("code",[e._v("@typescript-eslint/parser")]),e._v("，了解它的"),t("code",[e._v("ast")])]),e._v(" "),t("li",[e._v("熟悉了"),t("code",[e._v("eslint")]),e._v("检测修复、开发"),t("code",[e._v("eslint插件")]),e._v("过程")]),e._v(" "),t("li",[e._v("对"),t("code",[e._v("工具")]),e._v("的开发流程有了一定的认识")])]),e._v(" "),t("h2",{attrs:{id:"未来可以扩展的功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#未来可以扩展的功能"}},[e._v("#")]),e._v(" 未来可以扩展的功能")]),e._v(" "),t("ul",[t("li",[e._v("目前只支持了"),t("code",[e._v(".js")]),e._v(","),t("code",[e._v(".jsx")]),e._v(","),t("code",[e._v(".ts")]),e._v(","),t("code",[e._v(".tsx")]),e._v("废弃文件检测，可以通过修改"),t("code",[e._v("ts-unused-exports")]),e._v("源码支持其它类型比如"),t("code",[e._v(".less")]),e._v(","),t("code",[e._v(".jpg")]),e._v("等；")]),e._v(" "),t("li",[e._v("删除代码后可以使用"),t("code",[e._v("prettier API")]),e._v("格式化代码")]),e._v(" "),t("li",[e._v("建立"),t("code",[e._v("回收站")]),e._v("，专门收集工具删除过的废弃文件")])])])}),[],!1,null,null,null);t.default=o.exports}}]);