(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{431:function(v,_,r){"use strict";r.r(_);var t=r(1),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"进程和线程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程"}},[v._v("#")]),v._v(" 进程和线程")]),v._v(" "),_("p",[v._v("并行处理：指同一时刻处理多个任务。比如要计算下面三个表达式的值，并显示结果。")]),v._v(" "),_("div",{staticClass:"language-js line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-js"}},[_("code",[v._v("a "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("1")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("+")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v("\nb "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("3")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("*")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("4")]),v._v("\nc "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("=")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("5")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[v._v("2")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br")])]),_("p",[v._v("在编写代码时，我们需要把这个过程依次拆为四个任务：")]),v._v(" "),_("ul",[_("li",[v._v("任务1：计算a = 1 + 2")]),v._v(" "),_("li",[v._v("任务2：计算b = 3 * 4")]),v._v(" "),_("li",[v._v("任务3：计算c = 5 / 2")]),v._v(" "),_("li",[v._v("任务4：显示最后的结果。\n如果用"),_("strong",[v._v("单线程")]),v._v("的话需要按四步走依次处理，而如果用"),_("strong",[v._v("多线程")]),v._v("在处理的话，只需要按“两步走”：第一步是采用三个线程同时执行前三个任务，第二步，再执行第四个任务。很明显，并行处理能大大提升性能。")])]),v._v(" "),_("p",[v._v("进程："),_("strong",[v._v("一个进程就是第一个程序的运行实例。"),_("strong",[v._v("当启动一个程序的时候，操作系统会为改程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫")]),v._v("进程")]),v._v("。")]),v._v(" "),_("p",[v._v("线程："),_("strong",[v._v("线程是不能单独存在的，它是由进程来启动和管理的")]),v._v("。线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率。")]),v._v(" "),_("p",[v._v("进程和线程之间的关系有以下4个特点：")]),v._v(" "),_("ol",[_("li",[v._v("进程中任意一线程执行出错，都会导致整个进程的崩溃（已经计算出的结果会丢失）。")]),v._v(" "),_("li",[v._v("线程之间共享进程中的数据。")]),v._v(" "),_("li",[v._v("当一个进程关闭之后，操作系统会回收进程所占用的内存。")]),v._v(" "),_("li",[v._v("进程之间的内容相互隔离。")])]),v._v(" "),_("h2",{attrs:{id:"单进程浏览器时代"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#单进程浏览器时代"}},[v._v("#")]),v._v(" 单进程浏览器时代")]),v._v(" "),_("p",[v._v("单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里，这些模块包含了网络、插件、渲染引擎、页面、JavaScript运行环境等，早在2007年之前，市面上的浏览器都是单进程的。")]),v._v(" "),_("p",[v._v("单进程浏览器的缺陷：")]),v._v(" "),_("ol",[_("li",[v._v("不稳定")])]),v._v(" "),_("ul",[_("li",[v._v("早期通过插件来实现Web视频、Web游戏等各种强大的功能，而插件是容易出问题的模块，一旦意外崩溃就会引起整个浏览器的崩溃。")]),v._v(" "),_("li",[v._v("渲染引擎模块也是不稳定的，写复杂的JavaScript代码就有可能引起渲染引擎的崩溃，同时引起整个浏览器的崩溃。")])]),v._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[v._v("不流畅\n同一时刻就有一个模块可以运行。")]),v._v(" "),_("li",[v._v("不安全")])]),v._v(" "),_("ul",[_("li",[v._v("插件可以使用C/C++等代码编写，通过插件可以获取到操作系统的任意资源，当你在页面运行一个插件时也就意味着这个插件能完全操作你的电脑，如果是个恶意插件，那么它就可以释放病毒，窃取你的账号密码，引发安全性问题。")]),v._v(" "),_("li",[v._v("页面脚本可以通过浏览器的漏洞来获取系统权限，然后对你的电脑做一些恶意的事情。")])]),v._v(" "),_("h2",{attrs:{id:"多进程浏览器时代"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多进程浏览器时代"}},[v._v("#")]),v._v(" 多进程浏览器时代")]),v._v(" "),_("p",[v._v("让页面运行在单独的渲染进程中，同时页面里的插件也运行在单独的插件进程之中，而进程之间是通过IPC机制进行通信。")]),v._v(" "),_("p",[_("strong",[v._v("如何解决不稳定的问题")]),v._v("？\n由于进程是相互隔离的，页面或者插件崩溃不会影响到其它页面。\n"),_("strong",[v._v("如何解决不流畅的问题")]),v._v("？\nJavaScript是运行在渲染中的，即使在js中写了死循环阻塞了渲染进程，造成的影响也只是当前渲染的页面会没有响应。\n"),_("strong",[v._v("如何解决不安全的问题")]),v._v("？\n采用多进程架构的好处是可以使用"),_("strong",[v._v("安全沙箱")]),v._v("，可以理解为给进程上了一把锁，让其无法向硬盘上写入数据，不能在敏感位置读取任何数据，也不能获取系统权限。")]),v._v(" "),_("h2",{attrs:{id:"目前的多进程架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#目前的多进程架构"}},[v._v("#")]),v._v(" 目前的多进程架构")]),v._v(" "),_("p",[v._v("最新的Chrome浏览器包括：1个浏览器（Browser）主进程、1个GPU进程、1个网络（NetWork）进程、多个渲染进程和多个插件进程。")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("浏览器进程")]),v._v("：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")]),v._v(" "),_("li",[_("strong",[v._v("渲染进程")]),v._v("：核心任务是将HTML、CSS和JavaScript转换为用户可以与之交互的网页，排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个Tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")]),v._v(" "),_("li",[_("strong",[v._v("GPU进程")]),v._v(": Chrome刚开始发布的时候是没有GPU进程的。而GPU的使用初衷是为了实现3D CSS的效果，只是随后网页、Chrome的UI界面都选择采用GPU绘制，这使得GPU成为浏览器普遍的需求。最后，Chrome在其多进程架构上也引入了GPU进程。")]),v._v(" "),_("li",[_("strong",[v._v("网络进程")]),v._v("：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直到最近才独立出来，成为一个单独的进程。")]),v._v(" "),_("li",[_("strong",[v._v("插件进程")]),v._v("：主要是负责插件的执行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])]),v._v(" "),_("p",[v._v("所以，打开1个页面至少需要1个网络进程、1个浏览器进程、1个GPU进程以及一个渲染进程，共4个。")]),v._v(" "),_("p",[v._v("多进程模型的缺陷：")]),v._v(" "),_("ul",[_("li",[_("strong",[v._v("更高的资源占用")]),v._v("。因为每个进程都会包括公共基础结构的副本（如JavaScript运行环境），这就意味着浏览器会消耗更多的内存资源。")]),v._v(" "),_("li",[_("strong",[v._v("更复杂的体系结构")]),v._v("。浏览器各模块之前耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。")])]),v._v(" "),_("p",[v._v("对于上面这两个问题，Chrome团队一直在寻求一种弹性方案，既可以解决资源占用高的问题，也可以解决复杂的体系结构的问题。")]),v._v(" "),_("h2",{attrs:{id:"未来面向服务的架构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#未来面向服务的架构"}},[v._v("#")]),v._v(" 未来面向服务的架构")]),v._v(" "),_("p",[v._v("为了解决这些问题，在 2016 年，Chrome 官方团队使用“"),_("strong",[v._v("面向服务的架构")]),v._v("”（Services Oriented Architecture，简称 "),_("strong",[v._v("SOA")]),v._v("）的思想设计了新的 Chrome 架构。也就是说 Chrome 整体架构会朝向现代操作系统所采用的“面向服务的架构” 方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而"),_("strong",[v._v("构建一个更内聚、松耦合、易于维护和扩展的系统")]),v._v("，更好实现 Chrome 简单、稳定、高速、安全的目标。")])])}),[],!1,null,null,null);_.default=s.exports}}]);