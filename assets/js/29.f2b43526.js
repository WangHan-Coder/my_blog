(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{452:function(v,_,i){"use strict";i.r(_);var e=i(1),a=Object(e.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"语言按语法分类"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#语言按语法分类"}},[v._v("#")]),v._v(" 语言按语法分类")]),v._v(" "),_("ul",[_("li",[v._v("非形式语言\n"),_("ul",[_("li",[v._v("中文，英文")])])]),v._v(" "),_("li",[v._v("形式语言（乔姆斯基谱系）\n"),_("ul",[_("li",[v._v("0型 无限制文法")]),v._v(" "),_("li",[v._v("1型 上下文相关文法：一个词的意思和上下文相关")]),v._v(" "),_("li",[v._v("2型 上下文无关文法：一个词的意思和上下文无关。"),_("strong",[v._v("大部分的计算机语言都是主体上的上下文无关语法")]),v._v("。比如JavaScript语言不是上下文无关文法，它会在某一些小的点违法上下文无关文法，但它99%都是上下文无关文法。这样做不至于让做编译器的人太难受。")]),v._v(" "),_("li",[v._v("3型 正则文法，简单概括就是能用正则解析的文法。")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("this在于语义上的多变，但是语法是一致的。")])]),v._v(" "),_("h2",{attrs:{id:"产生式-bnf"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#产生式-bnf"}},[v._v("#")]),v._v(" 产生式（BNF）")]),v._v(" "),_("ul",[_("li",[v._v("用尖括号括起来的名称来表示语法结构名")]),v._v(" "),_("li",[v._v("语法结构分成"),_("strong",[v._v("基础结构")]),v._v("和需要用其他语法结构定义的"),_("strong",[v._v("复合结构")]),v._v(" "),_("ul",[_("li",[v._v("基础结构称终结符")]),v._v(" "),_("li",[v._v("复合结构称非终结符")])])]),v._v(" "),_("li",[v._v("引号和中间的字符表示终结符")]),v._v(" "),_("li",[v._v("可以有括号")]),v._v(" "),_("li",[_("code",[v._v("*")]),v._v("表示重复多次")]),v._v(" "),_("li",[_("code",[v._v("|")]),v._v("表示或")]),v._v(" "),_("li",[_("code",[v._v("+")]),v._v("表示至少一次")])]),v._v(" "),_("p",[v._v("四则运算：")]),v._v(" "),_("ul",[_("li",[v._v("1 + 2 * 3")])]),v._v(" "),_("p",[v._v("终结符：")]),v._v(" "),_("ul",[_("li",[v._v("Number")]),v._v(" "),_("li",[_("code",[v._v("+ - * /")])])]),v._v(" "),_("p",[v._v("非终结符：")]),v._v(" "),_("ul",[_("li",[v._v("MultiplicativeExpression")]),v._v(" "),_("li",[v._v("AdditiveExpression")])]),v._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v('<number> = "0" | "1" | "2" | "3" | "4" | "5" | "6"...\n<DecimalNumber> = "0" | ("1" | "2" | "3" ...) <number>*\n<Expression> = <DecimalNumber> | <DecimalNumber> "+" <Expression>\n<AdditiveExpression> = <DecimalNumber> | <DecimalNumber> "+" <AdditiveExpression>\n\n<MultiplicativeExpression> = <DecimalNumber> | <DecimalNumber> "*" <MultiplicativeExpression>\n\n1 + 2 * 3:\n<AdditiveExpression> = <MultiplicativeExpression> | <DecimalNumber> "+" <MultiplicativeExpression>\n\n<LogicalExpression> = <AdditiveExpression> | <AdditiveExpression> "||" <LogicalExpression> | <AdditiveExpression> "&&" <LogicalExpression>\n\n<PrimaryExpression> = <DecimalNumber> | "(" <LogicalExpression> ")"\n')])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br"),_("span",{staticClass:"line-number"},[v._v("8")]),_("br"),_("span",{staticClass:"line-number"},[v._v("9")]),_("br"),_("span",{staticClass:"line-number"},[v._v("10")]),_("br"),_("span",{staticClass:"line-number"},[v._v("11")]),_("br"),_("span",{staticClass:"line-number"},[v._v("12")]),_("br"),_("span",{staticClass:"line-number"},[v._v("13")]),_("br")])]),_("p",[v._v("通过产生式理解乔姆斯基谱系：")]),v._v(" "),_("ul",[_("li",[v._v("0型 无限制文法\n"),_("ul",[_("li",[_("code",[v._v("?::=?")])])])]),v._v(" "),_("li",[v._v("1型 上下文相关文法\n"),_("ul",[_("li",[_("code",[v._v("?<A>?::=?<B>?")])])])]),v._v(" "),_("li",[v._v("2型 上下文无关文法\n"),_("ul",[_("li",[_("code",[v._v("<A>::=?")])])])]),v._v(" "),_("li",[v._v("3型 正则文法\n"),_("ul",[_("li",[_("code",[v._v("<A>::=<A>?")])]),v._v(" "),_("li",[v._v("错误文法："),_("code",[v._v("<A>::=?<A>")])])])])]),v._v(" "),_("p",[v._v("JavaScript中有少量文法是上下文相关文法，比如"),_("code",[v._v("{ get a {return 1}, get: 1 }")]),v._v("，其中get在不同的上下文中意思不同，前者是可以作为属性修饰符，后者则是作为属性名。")]),v._v(" "),_("h2",{attrs:{id:"现代语言的特例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#现代语言的特例"}},[v._v("#")]),v._v(" 现代语言的特例")]),v._v(" "),_("ul",[_("li",[v._v("C++中，"),_("code",[v._v("*")]),v._v("可能表示乘号或者指针，具体是哪个，取决于星号前面的标识符是否被声明为类型")]),v._v(" "),_("li",[v._v("VB中，"),_("code",[v._v("<")]),v._v("可能是小于号，也可能是XML直接量的开始，取决于当前位置是否可以接受XML直接量")]),v._v(" "),_("li",[v._v("Python中，行首的tab符合空格会根据上一行的行首空白以一定规则被处理成虚拟终结符indent或者dedent")]),v._v(" "),_("li",[v._v("JavaScript中，"),_("code",[v._v("/")]),v._v("可能是除号，也可能是正则表达式开头，处理方式类似于VB，字符串模板中也需要特殊处理"),_("code",[v._v("}")]),v._v("，还有自动插入分号规则")])]),v._v(" "),_("h2",{attrs:{id:"图灵完备性"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图灵完备性"}},[v._v("#")]),v._v(" 图灵完备性")]),v._v(" "),_("ul",[_("li",[v._v("命令式——图灵机\n"),_("ul",[_("li",[v._v("goto")]),v._v(" "),_("li",[v._v("if和while")])])]),v._v(" "),_("li",[v._v("声明式——lambda\n"),_("ul",[_("li",[v._v("递归")])])])]),v._v(" "),_("h2",{attrs:{id:"动态与静态"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#动态与静态"}},[v._v("#")]),v._v(" 动态与静态")]),v._v(" "),_("ul",[_("li",[v._v("动态：\n"),_("ul",[_("li",[v._v("在用户的设备/在线服务器上")]),v._v(" "),_("li",[v._v("产品实际运行时")]),v._v(" "),_("li",[v._v("Runtime")])])]),v._v(" "),_("li",[v._v("静态：\n"),_("ul",[_("li",[v._v("在程序员的设备上")]),v._v(" "),_("li",[v._v("产品开发时")]),v._v(" "),_("li",[v._v("CompileTime")])])])]),v._v(" "),_("blockquote",[_("p",[v._v("编程：自己写代码。元编程：写一个程序生成代码。")])]),v._v(" "),_("h2",{attrs:{id:"类型系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类型系统"}},[v._v("#")]),v._v(" 类型系统")]),v._v(" "),_("ul",[_("li",[v._v("动态类型系统与静态类型系统")]),v._v(" "),_("li",[v._v("强类型与弱类型\n"),_("ul",[_("li",[v._v("String + Number（Number隐式转成String）")]),v._v(" "),_("li",[v._v("String == Boolean（Boolean先转成Number，再转成String）")])])]),v._v(" "),_("li",[v._v("复合类型\n"),_("ul",[_("li",[v._v("结构体。比如对象 { a: T1, b: T2 }")]),v._v(" "),_("li",[v._v("函数签名。比如 (T1, T2) => T3，参数的数量、类型、类型所处的位置不对，都会造成函数签名的不匹配")])])]),v._v(" "),_("li",[v._v("子类型\n"),_("ul",[_("li",[v._v("逆变/协变。协变：凡是能用"),_("code",[v._v("Array<Parent>")]),v._v("的地方，都能用"),_("code",[v._v("Array<Child>")]),v._v("。逆变：凡是能用"),_("code",[v._v("Function<Child>")]),v._v("的地方，都能用"),_("code",[v._v("Function<Parent>")]),v._v("。")])])])]),v._v(" "),_("p",[v._v("强弱类型语言的区分在于"),_("strong",[v._v("有无隐式类型转换")]),v._v("。比如C++是弱类型语言，ts也是弱类型语言。")]),v._v(" "),_("h2",{attrs:{id:"一般命令式编程语言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一般命令式编程语言"}},[v._v("#")]),v._v(" 一般命令式编程语言")]),v._v(" "),_("h3",{attrs:{id:"atom-原子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#atom-原子"}},[v._v("#")]),v._v(" Atom（原子）")]),v._v(" "),_("ul",[_("li",[v._v("Identifier")]),v._v(" "),_("li",[v._v("Literal")])]),v._v(" "),_("h3",{attrs:{id:"expression"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#expression"}},[v._v("#")]),v._v(" Expression")]),v._v(" "),_("ul",[_("li",[v._v("Atom")]),v._v(" "),_("li",[v._v("operator")]),v._v(" "),_("li",[v._v("Punctuator")])]),v._v(" "),_("h3",{attrs:{id:"statement"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#statement"}},[v._v("#")]),v._v(" Statement")]),v._v(" "),_("ul",[_("li",[v._v("Expression")]),v._v(" "),_("li",[v._v("Keyword")]),v._v(" "),_("li",[v._v("Punctuator")])]),v._v(" "),_("h3",{attrs:{id:"structure"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#structure"}},[v._v("#")]),v._v(" Structure")]),v._v(" "),_("ul",[_("li",[v._v("Function")]),v._v(" "),_("li",[v._v("Class")]),v._v(" "),_("li",[v._v("Process")]),v._v(" "),_("li",[v._v("Namespace")]),v._v(" "),_("li",[v._v("....")])]),v._v(" "),_("h3",{attrs:{id:"program"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#program"}},[v._v("#")]),v._v(" Program")]),v._v(" "),_("ul",[_("li",[v._v("Program")]),v._v(" "),_("li",[v._v("Module")]),v._v(" "),_("li",[v._v("Package")]),v._v(" "),_("li",[v._v("Library")])]),v._v(" "),_("blockquote",[_("p",[v._v("JavaScript的Program只有Program和Module。")])])])}),[],!1,null,null,null);_.default=a.exports}}]);