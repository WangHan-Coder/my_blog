(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{499:function(l,a,e){"use strict";e.r(a);var r=e(1),t=Object(r.a)({},(function(){var l=this,a=l._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[a("h2",{attrs:{id:"前端为何要进行打包和构建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端为何要进行打包和构建"}},[l._v("#")]),l._v(" 前端为何要进行打包和构建")]),l._v(" "),a("h3",{attrs:{id:"代码层面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码层面"}},[l._v("#")]),l._v(" 代码层面")]),l._v(" "),a("ul",[a("li",[l._v("体积更小（Tree-Shaking、压缩、合并），加载更快")]),l._v(" "),a("li",[l._v("编译高级语言或语法（TS、ES6+，模块化，scss）")]),l._v(" "),a("li",[l._v("兼容性和错误检查（Polyfill、postcss、eslint）")])]),l._v(" "),a("h3",{attrs:{id:"研发流程方面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#研发流程方面"}},[l._v("#")]),l._v(" 研发流程方面")]),l._v(" "),a("ul",[a("li",[l._v("统一、高效的开发环境")]),l._v(" "),a("li",[l._v("统一的构建流程和产出标准")]),l._v(" "),a("li",[l._v("集成贵公司构建规范（提测、上线等）")])]),l._v(" "),a("h2",{attrs:{id:"module、chunk、bundle的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module、chunk、bundle的区别"}},[l._v("#")]),l._v(" module、chunk、bundle的区别")]),l._v(" "),a("ul",[a("li",[l._v("module-各个源码文件，webpack中一切皆模块")]),l._v(" "),a("li",[l._v("chunk-多模板合并成的，如entry import() splitChunk")]),l._v(" "),a("li",[l._v("bundle-最终的输出文件")])]),l._v(" "),a("h2",{attrs:{id:"loader和plugin的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader和plugin的区别"}},[l._v("#")]),l._v(" loader和plugin的区别")]),l._v(" "),a("ul",[a("li",[l._v("loader模块转换器，如less -> css")]),l._v(" "),a("li",[l._v("plugin扩展插件，如HtmlWebpackPlugin")])]),l._v(" "),a("h2",{attrs:{id:"常见的loader和plugin有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的loader和plugin有哪些"}},[l._v("#")]),l._v(" 常见的loader和plugin有哪些")]),l._v(" "),a("h3",{attrs:{id:"loader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[l._v("#")]),l._v(" loader")]),l._v(" "),a("ul",[a("li",[l._v("babel-loader")]),l._v(" "),a("li",[l._v("eslint-loader")]),l._v(" "),a("li",[l._v("file-loader")]),l._v(" "),a("li",[l._v("url-loader")]),l._v(" "),a("li",[l._v("css-loader")]),l._v(" "),a("li",[l._v("less-loader")]),l._v(" "),a("li",[l._v("sass-loader")])]),l._v(" "),a("h3",{attrs:{id:"plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[l._v("#")]),l._v(" plugin")]),l._v(" "),a("ul",[a("li",[l._v("HtmlWebpackPlugin")]),l._v(" "),a("li",[l._v("DefinePlugin")])]),l._v(" "),a("h2",{attrs:{id:"webpack构建流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack构建流程"}},[l._v("#")]),l._v(" webpack构建流程")]),l._v(" "),a("ul",[a("li",[l._v("初始化参数，从shell脚本读取参数与配置文件进行合并，得到最终的配置对象")]),l._v(" "),a("li",[l._v("用上一步得到的配置对象，创建compiler对象，加载所有配置的参数，执行compiler对象的run方法进行编译")]),l._v(" "),a("li",[l._v("确定入口，根据配置中的entry找出所有的入口文件")]),l._v(" "),a("li",[l._v("编译模块，从入口模块出发，调用所有配置的loader对模块进行编译，再找出模块依赖的模块")]),l._v(" "),a("li",[l._v("输出资源，根据入口和模块的关系，打包成一个个的chunk，再把chunk转换成一个个单独的文件加入到输出列表")]),l._v(" "),a("li",[l._v("写入文件")])])])}),[],!1,null,null,null);a.default=t.exports}}]);