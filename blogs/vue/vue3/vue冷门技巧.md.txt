## Vue高级打工人



最近看了一篇谈及`vue冷门技巧`的文章，给我看笑了，里面说什么`自定义指令`、`动态组件`、`插槽` 、`组件mixin`、`自定义过滤器` 等等都写在里面了，但凡在实际工作中写过几个中小型的项目，这些都是常用大家都熟知的烂大街的东西好吧，什么叫做真正的冷门，今天来给大家盘点一下。



## 动态Watch

在vue中，watch可以监听数据的变化后重新执行函数，平常一般是这样定义Watch的。

```js
export default {
    data() {
        return {
          a: 1,
        }
    },
    watch: {
        'a'(newVal, oldVal) {
          console.log('watch重新执行', oldVal, newVal);
        }
    }
}
```

上面监听了a的值，在变化时会执行Watch，这个叫做`静态Watch`，不过vue其实是支持`动态watch`的，使用`this.$watch` API 可以实现对一个值的动态监听，用法如下：

```js
export default {
    data() {
        return {
          a: 1,
          unwatch: null,
        }
    },
    mounted() {
        this.unwatch = this.$watch('a', (newVal, oldVal) => {
          console.log('watch执行', oldVal, newVal);
        }, {
          immediate: true,
        })
    }
    beforeDestroy() {
        if (this.unwatch) {
            // 主动销毁watch
            this.unwatch();
            this.unwatch = null;
        }
    }
}
```



这里在组件中使用`$watch`对a进行监听，第一个参数可以传一个`Function`或者`String`，第二个参数是函数，第三个参数是`WatchOptions`，里面包括`immediate`、`deep`这些，然后返回一个销毁此watch的函数`unwatch`。

这里要注意，对于静态watch来说，vue会组件初始化时会帮你初始化watch，在组件销毁时帮你销毁掉watch。

而对于动态watch则需要自己主动调用`unwatch`销毁，否则组件被销毁后会一直存在内存中，造成内存泄漏，而且下次初始化这个组件时，又会创建一个新的watch，这样就会造成watch越来越多，内存泄漏越来越严重。



那么，动态watch有什么**应用场景**呢？
假设你现在有一个价格price，在这个价格变化后需要执行一段逻辑。而这个价格是通过后端接口拿到数据后初始化的，而没初始化之前，我是不需要执行这段逻辑的，这时候如果用`静态watch`，肯定会**让watch执行一次**，如果在watch执行中有一些**副作用**，那就还要多加一些逻辑判断，而且这次执行是毫无意义的，应当避免它执行，这时候用`动态watch`就再合适不过。

```js
export default {
     return {
       a: 1,
       unwatch: null,
    }
    async mounted() {
        this.a = await fetch('./xxx');
        this.unwatch = this.$watch('a', (newVal, oldVal) => {
          console.log('watch执行', oldVal, newVal);
        }, {
          immediate: true,
        })
    },
    beforeDestroy() {
        if (this.unwatch) {
            // 主动销毁watch
            this.unwatch();
            this.unwatch = null;
        }
    }
}
```

## @hook

在vue中可以通过`@hook`监听vue的生命周期钩子，来举个例子：

```vue
// 父组件 Home.vue
<template>
	<div>
       <Common @hook:mounted="commonMounted" />
    </div>
</template>

<script>
export default {
    methods: {
        commonMounted() {
            console.log('listen common mounted');
        }
    }
}
</script>

// 子组件 Common.vue

<script>
export default {
    mounted() {
      console.log('common mounted');
    }
}
</script>

打印结果如下：

common mounted
listen common mounted
```

这里在父组件`Home.vue`中用`@hook:mounted`给子组件增加监听，然后在子组件`Common.vue`的`mounted`钩子调用完后，会调用`@hook:mounted`的监听函数`commonMounted`，这时候你就可以通过 `$ref.childCompoent.$el` 拿到子组件的操作了。

不仅如此，@hook还可以实现动态监听，实现`程序化的监听器`。

就拿我们上面讲的$watch动态监听来说，有没有发现我们销毁watch的流程存在一点问题？

1. 问题一：需要把创建出来的@watch保存在组件的一个变量`unwatch`上，最好只有生命周期钩子可以访问到它。
2. 问题二：创建watch的代码独立于销毁watch的代码，维护性差，比如我们需要删除这个watch，还需要把`unwatch`，以及`beforeDestory`里面的代码一起删除，最好创建和销毁的代码能放在一起。

```js
export default {
     return {
       a: 1,
       unwatch: null,
    }
    mounted() {
        this.unwatch = this.$watch('a', (newVal, oldVal) => {
          console.log('watch执行', oldVal, newVal);
        }, {
          immediate: true,
        })
    },
    beforeDestroy() {
        if (this.unwatch) {
            // 主动销毁watch
            this.unwatch();
            this.unwatch = null;
        }
    }
}
```

@hook就能轻松解决这两个问题，来看如下代码：

```js
export default {
    mounted() {
        const unwatch = this.$watch('a', (newVal, oldVal) => {
          console.log('watch执行', oldVal, newVal);
        }, {
          immediate: true,
        })
        // 这里使用 $once，当回调执行后便释放监听
        this.$once('hook:beforeDestroy', function () {
          unwatch();
        })
    },
}
```

直接用程序监听当前组件的`beforeDestory`钩子，既省去了`unwatch`变量，又讲创建和清理的代码聚合在一起，方便维护。

## Vue mixin高级用法

## h函数

## Vue.util.defineReactive

## 手动挂载组件



`$attrs`、`$listeners`、`$parent` 、`$children`



