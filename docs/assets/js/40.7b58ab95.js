(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{540:function(t,e,a){"use strict";a.r(e);var r=a(5),_=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1-为什么需要redux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么需要redux"}},[t._v("#")]),t._v(" 1. 为什么需要redux")]),t._v(" "),a("p",[t._v("JavaScript的应用程序越来越复杂：")]),t._v(" "),a("ul",[a("li",[t._v("JavaScript需要管理的状态越来越多，越来越复杂；")]),t._v(" "),a("li",[t._v("这些状态包括服务器返回的数据、缓存数据、用户操作产生的数据等等，也包括一些UI的状态，比如某些元素是否被选中，是否显示加载动效，当前分页。")])]),t._v(" "),a("p",[t._v("管理不断变化的state是非常困难的：")]),t._v(" "),a("ul",[a("li",[t._v("状态之间相互会存在依赖")]),t._v(" "),a("li",[t._v("当应用程序复杂时，state在什么时候、因为什么原因发生了变化，发生了怎样的变化，会变得非常难以控制和追踪。")])]),t._v(" "),a("p",[t._v("React是在视图层帮助我们解决了DOM渲染的问题，但是state依然是我们自己来管理。")]),t._v(" "),a("p",[t._v("Redux就是一个帮助我们管理state的容器："),a("strong",[t._v("Redux是一个JavaScript的状态容器，提供了可预测的状态管理")]),t._v("。")]),t._v(" "),a("p",[t._v("Redux除了和React一起使用，它也可以和其它界面库一起来使用（比如Vue），并且它非常小（包括依赖在内，只有2kb），不像Vue的VueX，是强依赖于Vue的。")]),t._v(" "),a("h2",{attrs:{id:"_2-redux应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-redux应用场景"}},[t._v("#")]),t._v(" 2. Redux应用场景")]),t._v(" "),a("ul",[a("li",[t._v("随着 JavaScript 单页应用开发日趋复杂,管理不断变化的 state 非常困难；")]),t._v(" "),a("li",[t._v("Redux的出现就是为了解决state里的数据问题；")]),t._v(" "),a("li",[t._v("在React中，数据在组件中是单向流动的；")]),t._v(" "),a("li",[t._v("数据从一个方向父组件流向子组件(通过props)，由于这个特征，两个非父子关系的组件（或者称作兄弟组件）之间的通信就比较麻烦；")])]),t._v(" "),a("div",{staticClass:"img-box"},[a("img",{attrs:{src:t.$withBase("/react/redux-wrong.png"),alt:"图片加载失败"}})]),t._v(" "),a("h2",{attrs:{id:"_3-redux设计思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-redux设计思想"}},[t._v("#")]),t._v(" 3. Redux设计思想")]),t._v(" "),a("ul",[a("li",[t._v("Redux是将整个应用状态存储到到一个地方，称为store；")]),t._v(" "),a("li",[t._v("里面保存一棵状态树state tree；")]),t._v(" "),a("li",[t._v("组件可以派发dispatch行为action给store,而不是直接通知其它组件；")]),t._v(" "),a("li",[t._v("其它组件可以通过订阅store中的状态(state)来刷新自己的视图；")])]),t._v(" "),a("div",{staticClass:"img-box"},[a("img",{attrs:{src:t.$withBase("/react/redux-flow.png"),alt:"图片加载失败"}})]),t._v(" "),a("h2",{attrs:{id:"_4-redux三大原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-redux三大原则"}},[t._v("#")]),t._v(" 4. Redux三大原则")]),t._v(" "),a("ul",[a("li",[t._v("整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中；")]),t._v(" "),a("li",[t._v("State 是只读的，惟一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象 使用纯函数来执行修改，为了描述action如何改变state tree ，你需要编写 reducers；")]),t._v(" "),a("li",[t._v("单一数据源的设计让React的组件之间的通信更加方便，同时也便于状态的统一管理。")])])])}),[],!1,null,null,null);e.default=_.exports}}]);